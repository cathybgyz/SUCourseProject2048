package heuristic;

import game2048.Tile;
/*
 * Heuristic function to give the score relying on the value of the tile.
 * By calculating the result of the sum of logarithm divided by the number of tiles determine the amount of
 * tiles with small value. The biggest score is 12 and the smallest score is 1.
 *
 * Author: Tianyu Zhang
 */
public class SmallNumSum {
	public int LogNum(int i) {
		int m = 0;
		if (i==0) {m = 0;}
		else if (i==2) {m = 1;}
		else if(i==4) {m = 2;}
		else if(i==8) {m = 3;}
		else if(i==16) {m = 4;}
		else if(i==32) {m = 5;}
		else if(i==64) {m = 6;}
		else if(i==128) {m = 7;}
		else if(i==256) {m = 8;}
		else if(i==512) {m = 9;}
		else if(i==1024) {m = 10;}
		else if(i==2048) {m = 11;}
		return m;
	}
	public double SmallNum(Tile[] tile) {
		int n = tile.length;
		double q = 0.0;
		double sum = 0.0;
		for(Tile t : tile) {
			sum = LogNum(t.getValue())+sum;
		}
		int count = 0;
		for (Tile t : tile) {
			if (t.getValue() == 0)
				count++;
		}
		sum = sum/(n-count);
		if (sum < 2 ) {q = 1;}
		else if(sum>= 2 && sum <3) {q = 2;}
		else if(sum>= 3 && sum <4) {q = 3;}
		else if(sum>= 4 && sum <5) {q = 4;}
		else if(sum>= 5 && sum <6) {q = 5;}
		else if(sum>= 6 && sum <7) {q = 6;}
		else if(sum>= 7 && sum <8) {q = 7;}
		else if(sum>= 8 && sum <9) {q = 8;}
		else if(sum>= 9 && sum <10) {q = 9;}
		else if(sum>= 10 && sum <11) {q = 10;}
		else if(sum>= 11 && sum <12) {q = 11;}
		else  {q = 12;}
		return q;
	}
}
